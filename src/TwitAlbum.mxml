<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="absolute"
	width="900"
	height="500"
	creationComplete="load()"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	xmlns:twit="twit.*">
	<mx:Canvas id="container" height="100%" width="100%">
		
		<mx:Canvas width="100%" height="60"
			horizontalScrollPolicy="off"
			verticalScrollPolicy="off"
			>
			<mx:Grid id="boxUserInfo"
				autoLayout="true"
				horizontalScrollPolicy="off"
				verticalScrollPolicy="off"
				horizontalGap="8" verticalGap="1"
				height="60"
				>
				<mx:GridRow height="20">
					<mx:GridItem rowSpan="3">
						<mx:Image id="imgIcon" />
					</mx:GridItem>
					<mx:GridItem>
						<mx:Text id="txtScreenName"	/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:Text id="txtName" />
					</mx:GridItem>
					<mx:GridItem>
						<mx:Text id="txtDescription" />
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow height="20">
					<mx:GridItem>					
						<mx:Text id="txtFriends" toolTip="Friends"/>
						<mx:Text id="txtFollowers" toolTip="Followers"/>
						<mx:Text id="txtUpdates" toolTip="Updates"/>
					</mx:GridItem>
					<mx:GridItem id="locationBox" toolTip="Click to change location.">
						<mx:Text id="txtLocation" />
						<mx:TextInput id="changeLocation">
						</mx:TextInput>
					</mx:GridItem>
					<mx:GridItem>
						<mx:Text id="txtUrl" />
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow height="20">
					<mx:GridItem toolTip="Rate Limit">
						<mx:Text id="txtRateLimit"/>
					</mx:GridItem>
					<mx:GridItem>
						
					</mx:GridItem>
					<mx:GridItem>
						
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
			
		</mx:Canvas>
		
		<mx:TabNavigator id="canvas" width="100%" y="60" change="tabChangeEvent(event)" doubleClick="dblClick(event)" doubleClickEnabled="true">
			<mx:VBox id="cnvSettings" label="Login/Settings"
				height="100%" width="100%" autoLayout="true"
				>
				<mx:Canvas id="toolbar" y="75" height="50" width="100%" autoLayout="true" visible="true">
				
					<mx:TextInput id="username"
						width="100"
						text="user"
						/>
					<mx:TextInput id="password"
						width="100" x="100"
						text="password"
						displayAsPassword="true"
						/>
					<mx:Button id="btnLogin" label="Login"
						x="200" width="100"
						click="login()"
						/>					
					<mx:Button id="btnLogout" label="Logout"
						x="300" width="100"
						click="logout()"
						/>					
				</mx:Canvas>
			</mx:VBox>
			<mx:VBox id="cnvArchive" label="Archive"
				height="100%" width="100%" autoLayout="true"
				childAdd="addMessageEvent(event)"
				/>
			<mx:VBox id="cnvPublicTimeline" label="Public Timeline"
				height="100%" width="100%" autoLayout="true"
				childAdd="addMessageEvent(event)"
				/>
			<mx:VBox id="cnvFriendsTimeline" label="Friends Timeline"
				height="100%" width="100%" autoLayout="true"
				childAdd="addMessageEvent(event)"
				/>
			<mx:VBox id="cnvUserTimeline" label="User Timeline"
				height="100%" width="100%" autoLayout="true"
				childAdd="addMessageEvent(event)"
				/>
			<mx:VBox id="cnvPrivateMessages" label="Private Message"
				height="100%" width="100%" autoLayout="true" />
				
		</mx:TabNavigator>
		
		<mx:HBox id="filterBox" width="100%"
			 autoLayout="true"
			 horizontalScrollPolicy="off" verticalScrollPolicy="off"
			>
			<mx:Label text="Filter by"/>
			<mx:ComboBox id="filterBy" change="editFilterEvent(event)">
				<mx:dataProvider>
					<mx:String>Username:</mx:String>
					<mx:String>Has keyword:</mx:String>
					<mx:String>Has photo?</mx:String>
				</mx:dataProvider>
			</mx:ComboBox>
			<mx:TextInput id="filterText" change="editFilterEvent(event)" />
			<mx:Label text="Sort by"/>
			<mx:ComboBox id="sortBy" change="editFilterEvent(event)">
				<mx:dataProvider>
					<mx:String>Nothing</mx:String>
					<mx:String>Username</mx:String>
					<mx:String>Timestamp</mx:String>
					<mx:String>Has photo?</mx:String>
				</mx:dataProvider>
			</mx:ComboBox>
			<!--mx:TextInput id="sortText" /-->
			<mx:Label text="Apply:"/>
			<mx:ComboBox id="applyFilter" change="filter()" text="">
				<mx:dataProvider>
					<mx:String>Click here to toggle filter/sort</mx:String>
					<mx:String>Yes</mx:String>
					<mx:String>No</mx:String>
				</mx:dataProvider>
			</mx:ComboBox>
		</mx:HBox>
		
		<mx:Grid id="compose" width="100%" autoLayout="true" horizontalGap="3" verticalGap="3" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:GridRow id="photoRow" autoLayout="true">
				<mx:GridItem colSpan="2" autoLayout="true">
					<mx:HBox id="attachedPhotos">
						
					</mx:HBox>
				</mx:GridItem>
			</mx:GridRow>
			
			<mx:GridRow id="textRow" autoLayout="true">
				<mx:GridItem id="statusColumn" autoLayout="true">
					<mx:TextArea id="statusMessage" width="100%" maxChars="140">
						
					</mx:TextArea>
				</mx:GridItem>
				<mx:GridItem id="buttonColumn" autoLayout="true">
					<mx:ButtonBar id="sendButtons" direction="vertical"
						itemClick="buttonClickListener(event)"
						>
						<mx:dataProvider>
							<mx:Array id="composeButtons">
								<mx:String>Add Photo</mx:String>
								<mx:String>Edit Keywords</mx:String>
								<mx:String>Post Message</mx:String>									
							</mx:Array>
						</mx:dataProvider>
						
					</mx:ButtonBar>
				</mx:GridItem>
			</mx:GridRow>
		</mx:Grid>
		
	</mx:Canvas>
			
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import mx.events.ChildExistenceChangedEvent;
			import mx.controls.TabBar;
			import mx.containers.GridRow;
			import mx.core.ScrollPolicy;
			import mx.events.ItemClickEvent;
			import mx.events.ResizeEvent;
			import mx.controls.Alert;
			import twit.Message;
			import twit.Settings;
			import twit.UserFull;
			import twit.User;
			import twit.Status;
			import twit.Direct;
			import twit.Twit;
			import twit.TwitPicAPI
			import twit.TwitterAPI
			
			private var timer:Timer = new Timer(30000);
			
			private var user:User = null;
			private var openGroup:Object = new Object();
			
			private var msgQueue:Array = new Array();
			
			private var keywordPopup:VBox = new VBox();
			private var keywords:TextInput = new TextInput();
			
			public function dblClick(event:MouseEvent) {
				if(event.target.parent.name == "tabBar") tabChange();
			}
			
			public function editFilterEvent(event:Event) {
				this.applyFilter.selectedIndex = 0;
			}
			
			public function filter() {
				if (this.applyFilter.text == "Yes") {
					if (this.canvas.selectedIndex > 0) {
						var msgList:VBox = VBox(this.canvas.selectedChild);
						
						var filtered:Array = msgList.getChildren().filter(filterFunction);
						var sorted:Array = filtered.sort(sortFunction);
						msgList.removeAllChildren();
						for each (var msg:Message in sorted) {
							msgList.addChild(msg);
						}
						
					}					
				} else {
					if (this.canvas.selectedIndex > 0) {
						var msgList:VBox = VBox(this.canvas.selectedChild);
						
						tabChange();
					}
				}
				this.resize();
			}
			
			private function filterFunction(msg:*, index:int, arr:Array):Boolean {
				switch (filterBy.text) {
					case "Username:":
						return this.filterText.text == "" || (msg.author.toLowerCase() == this.filterText.text.toLowerCase())
					break;
					case "Has keyword:":
						return this.filterText.text == "" || msg.hasKeyword(this.filterText.text);
					break;
					case "Has photo?":
						return (msg.getPhotos().length > 0)
					break;
					
					default:
						return true;
				}
			}

			private function sortFunction(msg1:Message, msg2:Message):int {
				switch (this.sortBy.text) {
					case "Username":
						var a:String = msg1.author.toLowerCase();
						var b:String = msg2.author.toLowerCase();
						
						if (a > b) {
							return 1;
						} else if (a < b) {
							return -1;
						} else {
							return 0;							
						}
					break;
					
					case "Timestamp":
						var d1:Date = msg1.timestamp;
						var d2:Date = msg2.timestamp;
						
						if (d1.valueOf() < d2.valueOf()) {
							return 1;
						} else if (d1.valueOf() > d2.valueOf()) {
							return -1;
						} else {
							return 0;
						}
					break;
					
					case "Has photo?":
						var p1:int = msg1.getPhotos().length;
						var p2:int = msg2.getPhotos().length;
						if (p1 < p2) {
							return 1;
						} else if (p1 > p2) {
							return -1;
						} else {
							return 0;
						}
					break;
					
					default:
						return 0;
				}
				
			}
			
			public function load():void {
				Settings.getSettingsFromFile();		//load settings from file
				//loadArchive();
				//this.canvas.doubleClickEnabled = true;
				//this.canvas.addEventListener(MouseEvent.DOUBLE_CLICK, dblClick);
				
				container.addEventListener(ResizeEvent.RESIZE, this.resizeEvent);
				for each (var item:VBox in canvas.getChildren()) {
					item.addEventListener(MouseEvent.MOUSE_MOVE, this.mouseMoveVertical);
					
					item.horizontalScrollPolicy = ScrollPolicy.OFF;
				}
				
				var l:Text = new Text()
				l.text = "Enter Keywords (separeted by spaces)";
				this.keywords.maxChars = 135;
				this.keywords.addEventListener(FocusEvent.FOCUS_OUT, this.hideKeywords);
				
				this.keywordPopup.addChild(l);
				this.keywordPopup.addChild(this.keywords);
				
				this.boxUserInfo.horizontalScrollPolicy = ScrollPolicy.OFF;
				this.boxUserInfo.verticalScrollPolicy = ScrollPolicy.OFF;
				this.attachedPhotos.horizontalScrollPolicy = ScrollPolicy.OFF;
				this.attachedPhotos.verticalScrollPolicy = ScrollPolicy.OFF;
				this.attachedPhotos.addEventListener(MouseEvent.MOUSE_MOVE, this.mouseMoveHorizontal);
				this.filterBox.addEventListener(MouseEvent.MOUSE_MOVE, this.mouseMoveHorizontal);
				this.changeLocation.addEventListener(FocusEvent.FOCUS_OUT, this.updateLocationTxt);
				this.txtLocation.addEventListener(MouseEvent.CLICK, this.editLocation);
				this.changeLocation.setVisible(false);
				
				//var t = new TwitterAPI(this.username.text, this.password.text);
				//t.getDirectMsg(getDirectMsgListener);
				//t.getSentMsg(getSentMsgListener);
				//t.sendDirectMsg("mkb2014", "What are you doing now?", sendDirectMsgListener);
				//t.destroyDirectMsg("44154900", destroyDirectMsgListener);
				
				this.resize();
			}
			
			private function showKeywords() {
				this.keywordPopup.width = 350;
				this.keywordPopup.height = 100;
				this.keywordPopup.setStyle("backgroundColor", "#afafaf");
				this.keywordPopup.x = (this.container.width - this.keywordPopup.width) / 2
				this.keywordPopup.y = (this.container.height - this.keywordPopup.height) / 2
				this.keywords.width = 350;
				this.keywords.height = 50;
				
				PopUpManager.addPopUp(this.keywordPopup, this, true);
			}
			
			private function hideKeywords(event:FocusEvent) {
				PopUpManager.removePopUp(this.keywordPopup);
			}
			
			private function editLocation(event:MouseEvent) {
				this.locationBox.setChildIndex(this.changeLocation, 0);
				this.txtLocation.setVisible(false);
				this.changeLocation.text = this.txtLocation.text;
				this.changeLocation.setVisible(true);
				this.changeLocation.setFocus();
			}
			
			private function updateLocationTxt(event:FocusEvent) {
				this.changeLocation.setVisible(false);
				this.txtLocation.setVisible(true);
				this.locationBox.setChildIndex(this.txtLocation, 0);
				Settings.twitter.updateLocation(changeLocation.text,this.updateLocationListener);
				
			}
			
			private function mouseMoveVertical(event:MouseEvent) {
				var container = (event.currentTarget);
				if (!event.buttonDown && (event.ctrlKey || event.controlKey) && container.getChildren().length > 0) {
					var y:int = event.stageY;
					var c:DisplayObject = container.getChildAt(container.getChildren().length - 1);
					var	w:int = c.y + c.height;
					
					y -= container.parent.y;
					y -= container.y;
					
					container.verticalScrollPosition = (w - container.height) * (y / container.height);
					//event.stopPropagation();
				} 
			}
			
			private function mouseMoveHorizontal(event:MouseEvent) {
				var container = (event.currentTarget);
				if (!event.buttonDown && container.getChildren().length > 0) {
					var x:int = event.stageX;
					var c:DisplayObject = container.getChildAt(container.getChildren().length - 1);
					var	w:int = c.x + c.width;
					
					x -= container.x;
					
					container.horizontalScrollPosition = (w - container.width) * (x / container.width);
					//event.stopPropagation();
				} 
			}
			
			private function resizeEvent(event:ResizeEvent):void {
				resize();
			}
			private function resize():void {
				//this.container.width = this.width - 8;
				//this.container.height = this.height - 8;
				
				//this.tabbar.width = this.container.width;
				this.canvas.width = this.container.width;
				this.boxUserInfo.width = this.container.width;
				
				this.sendButtons.validateNow();
				this.statusMessage.height = this.sendButtons.height;
				this.buttonColumn.width = this.sendButtons.width;
				
				this.compose.width = this.container.width;
				this.compose.height = this.attachedPhotos.height + this.statusMessage.height + 10
				this.statusColumn.width = this.compose.width - this.buttonColumn.width - 10;
				this.compose.y = this.container.height - this.compose.height;
				this.canvas.height = this.compose.y - this.canvas.y - 45;
				
				this.filterBox.y = this.compose.y - 45; 
				this.filterBox.width = this.compose.width - 4 
				
				this.attachedPhotos.width = this.compose.width - 4; 
				
				for each(var tab:VBox in this.canvas.getChildren()) {
					tab.width = this.canvas.width;
					if(tab.verticalScrollBar != null) tab.verticalScrollBar.width = 20;
					for each (var item in tab.getChildren()) {						
						item.width = this.canvas.width - 20;
					}
				}
			}
			
			
			private function tabChangeEvent(event:Event) {
				tabChange();
			}
			
			private function addMessageEvent(event:ChildExistenceChangedEvent) {
				var msg:Message = Message(event.relatedObject);
				var container:VBox = VBox(event.currentTarget);
				this.cnvPublicTimeline.getChildren().so
				
				if (this.applyFilter.text == "Yes") {
					if ( !filterFunction(msg, 0, null)) container.removeChild(msg);
				}
			}
			
			private function tabChange() {
				if (Settings.twitter == null && this.canvas.selectedIndex > 1) {
					Alert.show ("You must login before you may view a timeline.");
				} else {
					this.sortBy.selectedIndex = 0;
					switch (this.canvas.selectedIndex) {
						case 1:
							this.resize();
							this.cnvArchive.removeAllChildren();
							this.loadArchive();
						break;
						case 2:
							this.cnvPublicTimeline.removeAllChildren();
							Settings.twitter.getPublicTimeline(this.user.screen_name, 50, "1", this.getPublicTimelineListener);
							//var tl:Timeline = this.cnvPublicTimeline; 
							//Settings.twitter.getPublicTimeline(this.user.screen_name, 20, tl.last_id, tl.getTimelineListener);
						break;
						case 3:
							this.cnvFriendsTimeline.removeAllChildren();
							Settings.twitter.getFriendsTimeline(this.user.screen_name, 50, "1", this.getFriendsTimelineListener);
							//var tl:Timeline = this.cnvFriendsTimeline; 
							//Settings.twitter.getFriendsTimeline(this.user.screen_name, 20, tl.last_id, tl.getTimelineListener);
						break;
						case 4:
							this.cnvUserTimeline.removeAllChildren();
							Settings.twitter.getUserTimeline(this.user.screen_name, 50, "1", this.getUserTimelineListener);
							//var tl:Timeline = this.cnvUserTimeline; 
							//Settings.twitter.getUserTimeline(this.user.screen_name, 20, tl.last_id, tl.getTimelineListener);
						break;
						case 5:
							this.cnvPrivateMessages.removeAllChildren();
							Settings.twitter.getDirectMsg(this.getDirectMsgListener);
							//Settings.twitter.getSentMsg(this.getSentMsgListener);
						break;
					}
				}
			}
			
			private function logout():void {
				if (Settings.twitter != null)
					Settings.twitter.logout(this.logoutListener);	
			}
			
			private function login():void {
				Settings.twitter = new TwitterAPI(username.text, password.text);
				Settings.twitter.login(this.loginListener);
				//Alert.show("Logging in...");				
			}
			
			private function loadUser(sn:String):void {
				if (Settings.twitter != null) {
					Settings.twitter.getUser(sn, "", this.loadUserListener);
				} else {
					//no need for error msg, since the user cannot directly invoke this method
					//Alert.show("You are not logged in.");
				}
			}
			
			private function uploadPhoto():void {
				if (Settings.twitpic != null)
					Settings.twitpic.upload(this.twitPicListener);
				else
					Alert.show("You must be logged in to upload an image.");
			}
			
			private function updateUserTimeline():void {
				if (Settings.twitter != null)
					Settings.twitter.getUserTimeline(this.user.id, 20, "", this.getUserTimelineListener);
				else
					Alert.show("You must be logged in to update the timeline.");					
			}
			
			private function timerListener(event:TimerEvent) {
				if (this.user != null) {
					this.loadUser(this.user.screen_name);
					if (Settings.twitter != null) {
						Settings.twitter.getRateLimit(this.getRateLimitListener);
					}
				}
			}
			
			private function genericListener(success:Boolean, xml:XML):void {
				Alert.show("genericListener>\nsuccess: " + success);
				Alert.show(xml.toString());
			}
			
			private function loginListener(success:Boolean, authenticated:Boolean):void {
				//Alert.show("loginListener>\nsuccess: " + success);
				//Alert.show("logged in: " + authenticated);
				
				if (!success) {
					Alert.show("Login failed:\n\nError sending request to server.  Please try again.");
					
					Settings.twitpic = null;
					Settings.twitter = null;
				} else if (!authenticated) {
					Alert.show("Login failed:\n\nAuthentication rejected.  Please re-enter your username and password.");
					
					Settings.twitpic = null;
					Settings.twitter = null;
				} else {
					//logged in:
					//load twitpic
					Settings.twitpic = new TwitPicAPI(username.text, password.text);
					//load user data
					loadUser(username.text);
					this.password.text = "";
					
					this.timer.start();
					this.timer.addEventListener(TimerEvent.TIMER, this.timerListener);
				}
			}

			private function logoutListener(success:Boolean, loggedout:Boolean):void {
				//Alert.show("logoutListener>\nsuccess: " + success);
				//Alert.show("logged out: " + loggedout);
				
				if (!success) {
					Alert.show("Logout failed:\n\nError sending request to server.  Please try again.");
					
					//Settings.twitpic = null;
					//Settings.twitter = null;
				} else if (!loggedout) {
					Alert.show("Logout failed:\n\nSession may already be terminated.");
					
					//Settings.twitpic = null;
					//Settings.twitter = null;
				} else {
					Settings.twitpic = null;
					Settings.twitter = null;
					this.user = null;
					
					for each (var row:GridRow in this.boxUserInfo.getChildren()) {						
						for each (var item:GridItem in row.getChildren()) {
							
							item.visible = false;
							
						}
					}
					
					Alert.show("You are now logged out.");
				}
			}
			
			private function loadUserListener(success:Boolean, user:UserFull):void {
				//Alert.show("loadUserListener>\n" + success);
				if (!success) {
					//no need for alert
					//Alert.show("Updating user information failed.");
				} else {
					this.user = user;
					twit.Settings.setUser(user);
				}
				
				if (this.user != null) {
					twit.Settings.setTextcolor("#" + user.profile_text_color);
					twit.Settings.setBackcolor("#" + user.profile_background_color);
					twit.Settings.setLinkcolor("#" + user.profile_link_color);
					twit.Settings.setFillcolor("#" + user.profile_sidebar_fill_color);
					twit.Settings.setBordercolor("#" + user.profile_sidebar_border_color);
										
					this.setStyle("backgroundColor", "#" + user.profile_background_color);
					
					this.imgIcon.source = user.profile_image_url;
					this.txtScreenName.text = user.screen_name;
					this.txtName.text = user.name;
					this.txtLocation.text = user.location;
					this.txtDescription.text = user.description;
					this.txtFollowers.text = "" + user.followers_count;
					this.txtFriends.text = "" + user.friends_count;
					this.txtUpdates.text = "" + user.statuses_count;
					this.txtUrl.text = user.url;
					
					for each (var row:GridRow in this.boxUserInfo.getChildren()) {						
						for each (var item:GridItem in row.getChildren()) {
							item.visible = true;
							item.setStyle("color", "#" + user.profile_text_color);							
						}
					}
				
				}
			}
			
			private function getUserTimelineListener(success:Boolean, statuses:Array):void {
				if (success && statuses != null) {
					for(var i:int = 0; i < statuses.length; i++) {
						var s:Status = new Status(new XML(statuses[i]));
						addStatus(s, this.cnvUserTimeline);
					}
					this.resize();
				} else {
					Alert.show("An error occured updating the timeline.");
				}
			}
			private function getFriendsTimelineListener(success:Boolean, statuses:Array):void {
				if (success && statuses != null) {
					for(var i:int = 0; i < statuses.length; i++) {
						var s:Status = new Status(new XML(statuses[i]));
						addStatus(s, this.cnvFriendsTimeline);
					}
					this.resize();
				} else {
					Alert.show("An error occured updating the timeline.");
				}
			}
			private function getPublicTimelineListener(success:Boolean, statuses:Array):void {
				if (success && statuses != null) {
					for(var i:int = 0; i < statuses.length; i++) {
						var s:Status = new Status(new XML(statuses[i]));
						addStatus(s, this.cnvPublicTimeline);
					}
					this.resize();
				} else {
					Alert.show("An error occured updating the timeline.");
				}
			}
			
			private function deleteArchived(unwanted:Message):void {
				   
				this.cnvArchive.removeChild(unwanted);
				
				var fs:FileStream = new FileStream();
				fs.open(Settings.ARCHIVE_XML_FILE, FileMode.WRITE);
				fs.writeUTFBytes(new String("<?xml version=\"1.0\" encoding=\"UTF-8\"?>"));
				for each (var msg:Message in this.cnvArchive.getChildren()) {
					for each (var stat:XML in msg.getXMLs()) {
						fs.writeUTFBytes(stat.toString());   
					}
				}
				fs.close();
			}
		/*	private function deleteArchived(statuses:Array):void {
				var fs:FileStream = new FileStream();
				fs.open(ARCHIVE_XML_FILE, FileMode.APPEND);
				for each (var item:XML in statuses) {
					fs.writeUTFBytes(item.toString());
					if(item.child("text").toString().substr(0,7) == "[photo]") {
						for each (var url:String in item.child("text").toString().substr(7).split(' ')) {
							var req:URLRequest = new URLRequest(url.replace("twitpic.com/", "twitpic.com/show/full/"));
							var stream:URLStream= new URLStream();
							stream.addEventListener(Event.COMPLETE, function (e:Event) : void {
		              				writeArchiveImageFile(e,url.substr(19).concat(".jpg"), stream);
		       			 		});
							stream.load(req);	
							
							req = new URLRequest(url.replace("twitpic.com/", "twitpic.com/show/thumb/"))
							var stream2:URLStream= new URLStream();
							stream2.addEventListener(Event.COMPLETE, function (e:Event) : void {
		              				writeArchiveImageFile(e,url.substr(19).concat("_thumb.jpg"), stream2);
		       			 		});
							stream2.load(req);	
						}
					}
				}
				fs.close();
			}*/
			
			private function loadArchive():void {
				var fs:FileStream = new FileStream();
				fs.open(Settings.ARCHIVE_XML_FILE, FileMode.READ);
				var data:String = fs.readUTFBytes(fs.bytesAvailable);
				if (data.length != 0) {
					data = data.replace("?>", "?><statuses type=\"array\">");
					data += "</statuses>";
				}
				var statList:XMLList = XML(data).status;
				fs.close();
				for (var i:int = 0; i < statList.length(); i++) {
					var s:Status = new Status(new XML(statList[i]));
					if(false && s.text.substr(0,7)== "[photo]") {
						var purls:Array = s.text.substr(7).split(' ');
						var url:String = "[photo]";
						for each (var purl:String in purls) {
							purl = purl.replace("http://twitpic.com/", Settings.ARCHIVE_XML_FILE.nativePath).concat(".jpg");
							purl = purl.replace("archive.xml", "");
							purl = "@Embed(source='" + purl + ".jpg')";
							var regex:RegExp = new RegExp();
							regex = / /g;
							purl = purl.replace(regex, "%20");
							regex = /\\/g;
							purl = purl.replace(regex, "/");
							url += purl + " ";									
						}
						s.text = url;
						addStatus(s, this.cnvArchive);
					} else {
						addStatus(s, this.cnvArchive);
					}
				}
			}
			
			private function addStatus(s:Status, timeline:VBox) {
				var txt:String = s.text;
				var t:Twit = new Twit();
				var u:String = s.user.screen_name;
				
				if (txt.substr(0, 7) == "[group]")
				{
					this.openGroup[u] = new Message();
					Message(this.openGroup[u]).setStatus(s);
					Message(this.openGroup[u]).addXML(s.xml);
					if (timeline == this.cnvArchive) {
						Message(this.openGroup[u]).setMsgType(2);
					} else {
						Message(this.openGroup[u]).setMsgType(0);
					}
				}
				else if (txt.substr(0, 8) == "[/group]" && this.openGroup[u] != null)
				{
					timeline.addChild(this.openGroup[u]);
					
					Message(this.openGroup[u]).addXML(s.xml);
					if (timeline == this.cnvArchive) {
						Message(this.openGroup[u]).setMsgType(2);
					} else {
						Message(this.openGroup[u]).setMsgType(0);
					}
					this.openGroup[u].width = this.canvas.width;
					this.openGroup[u] = null;
				}
				else if (this.openGroup[u] != null)
				{
					this.openGroup[u].addStatus(s);
					Message(this.openGroup[u]).addXML(s.xml);
					if (timeline == this.cnvArchive) {
						Message(this.openGroup[u]).setMsgType(2);
					} else {
						Message(this.openGroup[u]).setMsgType(0);
					}
				}
				else
				{
					var msg:Message = new Message();
					msg.setStatus(s);
					msg.addStatus(s);
					msg.addXML(s.xml);
					if (timeline == this.cnvArchive) {
						msg.setMsgType(2);
					} else {
						msg.setMsgType(0);
					}
					timeline.addChild(msg);
				}
			}
			
			private function addDirect(d:Direct, timeline:VBox) {
				var txt:String = d.text;
				var t:Twit = new Twit();
				var u:String = d.sender_screen_name;
				
				if (txt.substr(0, 7) == "[group]")
				{
					this.openGroup[u] = new Message();
					Message(this.openGroup[u]).setDirect(d);
					Message(this.openGroup[u]).addXML(d.xml);
				}
				else if (txt.substr(0, 8) == "[/group]" && this.openGroup[u] != null)
				{
					timeline.addChild(this.openGroup[u]);
					
					Message(this.openGroup[u]).addXML(d.xml);
					this.openGroup[u].width = this.canvas.width;
					this.openGroup[u] = null;
				}
				else if (this.openGroup[u] != null)
				{
					this.openGroup[u].addDirect(d);
					Message(this.openGroup[u]).addXML(d.xml);
				}
				else
				{
					var msg:Message = new Message();
					msg.setDirect(d);
					msg.addDirect(d);
					msg.addXML(d.xml);
					timeline.addChild(msg);
				}
			}
			
			private function updateStatusListener(success:Boolean, xml:XML):void {
				//Alert.show("updateStatusListener>\nsuccess: " + success);
				if (success) {
					this.msgQueue.pop(); //toss old msg, which was successful
					if (this.msgQueue.length > 0) {
						var text:String = this.msgQueue.pop(); //get next msg
						Settings.twitter.updateStatus(text, this.updateStatusListener); //send
						this.msgQueue.push(text); //push msg back in in case it doesnt go through
					} else {
						this.statusMessage.htmlText = "";
						this.statusMessage.text = "";
						this.attachedPhotos.removeAllChildren();
						this.attachedPhotos.height = 0;
						this.resize();
					}
				} else {
					var text:String = this.msgQueue.pop(); //get next msg
					Settings.twitter.updateStatus(text, this.updateStatusListener); //send
					this.msgQueue.push(text); //push msg back in in case it doesnt go through
				}
			}
			
			private function updateLocationListener(success:Boolean, xml:XML):void {
				if (!success) {
					Alert.show("Failed to change location on twitter.");
					
				} else {
					this.txtLocation.text = this.changeLocation.text;
				}
			}
			
			private function getRateLimitListener(success:Boolean, rate:int):void {

				this.txtRateLimit.text = "" + (100 * rate) + "%";				
			}
			
			private function getFriendsListener(success:Boolean, xml:XML):void {
				Alert.show("success: " + success);
				Alert.show(xml.toString());
			}
			
			private function getFollowersListener(success:Boolean, xml:XML):void {
				Alert.show("success: " + success);
				Alert.show(xml.toString());
			}
			
			private function getUserListener(success:Boolean, xml:XML):void {
				Alert.show("success: " + success);
				Alert.show(xml.toString());
			}

			private function getDirectMsgListener(success:Boolean, msgs:Array):void {
				if (success && msgs != null) {
					for(var i:int = 0; i < msgs.length; i++) {
	//					Alert.show(msgs[i]);
						var d:Direct = new Direct(msgs[i]);
						addDirect(d, this.cnvPrivateMessages);
					}
					this.resize();
				} else {
					Alert.show("An error occured reading your private messages.");
				}
			}
			
			private function getSentMsgListener(success:Boolean, msgs:Array):void {
				if (success && msgs != null) {
					for(var i:int = 0; i < msgs.length; i++) {
						var d:Direct = new Direct(new XML(msgs[i]));
						addDirect(d, this.cnvPrivateMessages);
					}
					this.resize();
				} else {
					Alert.show("An error occured reading your private messages.");
				}
			}
			
			private function sendDirectMsgListener(success:Boolean, xml:XML):void {
				Alert.show("success: " + success);
				Alert.show(xml.toString());
			}
			
			private function destroyDirectMsgListener(success:Boolean, xml:XML):void {
				Alert.show("success: " + success);
				Alert.show(xml.toString());
			}
			
			private function twitPicListener(url:String, thumburl:String, fullurl:String):void
			{
				var t:Twit = new Twit();
				t.setImage(url);
				this.attachedPhotos.addChild(t);
				this.attachedPhotos.height = 150;
				
				this.resize();
			}
			
			private function buttonClickListener(event:ItemClickEvent) {
				switch(event.label) {
					case "Add Photo":
						this.uploadPhoto();
					break;
					
					case "Post Message":
						this.postMessage();
					break;
					
					case "Edit Keywords":
						this.showKeywords();
					break;
				}
			}
			
			private function postMessage():void {
				if (Settings.twitter == null) {
					Alert.show("You must login before you can post a message.");
				} else if (this.statusMessage.text.length == 0) {
					Alert.show("You may not post a blank status message.  Please enter some text.");	
				} else {
					postText("[/group]");
					if (this.attachedPhotos.numChildren > 0) {
						var photos:String = "";
						for (var i:int = 0; i < this.attachedPhotos.numChildren; i++) {
							if (i % 5 == 0) {
								if (photos.length > 0) postText(photos);
								photos = "[photo]";								
							}
							photos += Twit(this.attachedPhotos.getChildAt(i)).imageUrl + " ";
						}
						if (photos != "[photo]") postText(photos);
					}
					if (this.keywords.text.length > 0)
						postText("[key]" + this.keywords.text);					
					
					postText(this.statusMessage.text);					
					postText("[group]");
				}
			}
			
			private function postImage(url:String):void {
				if (Settings.twitter != null) {
					Settings.twitter.updateStatus("[photo]" + url, this.updateStatusListener);
				} else {
					Alert.show ("You must login before you may post an image.");
				}
			}
			
			
			private function postText(text:String):void {
				if (Settings.twitter != null) {
					this.queueMessage(text);
//					Settings.twitter.updateStatus(text, this.updateStatusListener);
				} else {
					Alert.show ("You must login before you may post a message.");
				}
			}
			
			private function queueMessage(text:String) {
				if (this.msgQueue.length == 0) {
					Settings.twitter.updateStatus(text, this.updateStatusListener);
				} else {
					this.msgQueue.push(text);
				}
			}
		]]>
	</mx:Script>
</mx:WindowedApplication>
