<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
	creationComplete="load()"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	>
	<mx:Canvas id="container" height="100%" width="100%">
		
		<mx:Canvas width="100%" height="50"
			horizontalScrollPolicy="off"
			verticalScrollPolicy="off"
			>
				
			<mx:Grid id="boxUserInfo"
				autoLayout="true"
				horizontalScrollPolicy="off"
				verticalScrollPolicy="off"
				horizontalGap="8" verticalGap="1"
				height="50"
				>
				<mx:GridRow height="16">
					<mx:GridItem rowSpan="3">
						<mx:Image id="imgIcon" />
					</mx:GridItem>
					<mx:GridItem colSpan="2">
						<mx:Text id="txtScreenName"	/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:LinkButton label="Logout" />
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow height="16">
					<mx:GridItem>					
						<mx:Text id="txtFriends" />
						<mx:Text id="txtFollowers" />
						<mx:Text id="txtUpdates" />
					</mx:GridItem>
					<mx:GridItem>
						<mx:Text id="txtName" />
					</mx:GridItem>
					<mx:GridItem>
						<mx:Text id="txtDescription" />
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow height="16">
					<mx:GridItem>
						<mx:Text id="txtRateLimit" />
					</mx:GridItem>
					<mx:GridItem>
						<mx:Text id="txtLocation" />
					</mx:GridItem>
					<mx:GridItem>
						<mx:Text id="txtUrl" />
					</mx:GridItem>				
				</mx:GridRow>	
			</mx:Grid>
			
		</mx:Canvas>
		
		<mx:TabNavigator id="canvas" width="100%" y="50">
			<mx:VBox id="cnvSettings" label="Login/Settings"
				height="100%" width="100%" autoLayout="true"
				>
				<mx:Canvas id="toolbar" y="75" height="25" width="100%" autoLayout="true" visible="true">
				
					<mx:TextInput id="username"
						width="100"
						text="user"
						/>
					<mx:TextInput id="password"
						width="100" x="100"
						text="password"
						displayAsPassword="true"
						/>
					<mx:Button id="btnLogin" label="Login"
						x="200" width="100"
						click="login()"
						/>
					<mx:Button id="btnUpdateUserTimeline" label="Update User Timeline"
						x="400" width="100"
						click="updateUserTimeline()"
						/>					
				</mx:Canvas>
			</mx:VBox>
			<mx:VBox id="cnvPublicTimeline" label="Public Timeline"
				height="100%" width="100%" autoLayout="true" />
			<mx:VBox id="cnvFriendsTimeline" label="Friends Timeline"
				height="100%" width="100%" autoLayout="true" />
			<mx:VBox id="cnvUserTimeline" label="User Timeline"
				height="100%" width="100%" autoLayout="true" />
			<mx:VBox id="cnvPrivateMessages" label="Private Message"
				height="100%" width="100%" autoLayout="true" />
			<mx:VBox id="cnvArchive" label="Archive"
				height="100%" width="100%" autoLayout="true" />
				
		</mx:TabNavigator>
		
		<mx:Grid id="compose" width="100%" autoLayout="true" horizontalGap="3" verticalGap="3">
			<mx:GridRow id="photoRow" autoLayout="true">
				<mx:GridItem colSpan="2" autoLayout="true">
					<mx:HBox id="attachedPhotos" width="100%">
						
					</mx:HBox>
				</mx:GridItem>
			</mx:GridRow>
			
			<mx:GridRow id="textRow" autoLayout="true">
				<mx:GridItem id="statusColumn" autoLayout="true">
					<mx:TextArea id="statusMessage" width="100%" maxChars="140">
						
					</mx:TextArea>
				</mx:GridItem>
				<mx:GridItem id="buttonColumn" autoLayout="true">
					<mx:ButtonBar direction="vertical" itemClick="buttonClickListener(event)">
						<mx:dataProvider>
							<mx:Array id="composeButtons">
								<mx:String>Add Photo</mx:String>
								<mx:String>Edit Keywords</mx:String>
								<mx:String>Post Message</mx:String>									
							</mx:Array>
						</mx:dataProvider>
						
					</mx:ButtonBar>
				</mx:GridItem>
			</mx:GridRow>
		</mx:Grid>
		
	</mx:Canvas>
			
	<mx:Script>
		<![CDATA[
			import mx.containers.GridRow;
			import mx.core.ScrollPolicy;
			import mx.events.ItemClickEvent;
			import mx.events.ResizeEvent;
			import twit.Message;
			import twit.Settings;
			import twit.UserFull;
			import twit.User;
			import twit.Status;
			import twit.Twit;
			import twit.TwitPicAPI
			import twit.TwitterAPI
			import mx.controls.Alert;
			
			private var twitpic:TwitPicAPI = null;
			private var twitter:TwitterAPI = null;
			
			private var user:User = null;
			private var openGroup:Object = new Object();
			
			private var msgQueue:Array = new Array();
			
			public function load():void {
				Settings.getSettingsFromFile();		//load settings from file
				loadArchive();
				container.addEventListener(ResizeEvent.RESIZE, this.resize);
				for each (var item:VBox in canvas.getChildren()) {
					item.addEventListener(MouseEvent.MOUSE_MOVE, this.mouseMoveVertical);
					
					item.horizontalScrollPolicy = ScrollPolicy.OFF;
				}
				
				this.boxUserInfo.horizontalScrollPolicy = ScrollPolicy.OFF;
				this.boxUserInfo.verticalScrollPolicy = ScrollPolicy.OFF;
				//var t = new TwitterAPI(this.username.text, this.password.text);
				//t.getDirectMsg(getDirectMsgListener);
				//t.getSentMsg(getSentMsgListener);
				//t.sendDirectMsg("mkb2014", "What are you doing now?", sendDirectMsgListener);
				//t.destroyDirectMsg("44154900", destroyDirectMsgListener);
			}
			
			private function mouseMoveVertical(event:MouseEvent) {
				var container = (event.currentTarget);
				if (!event.buttonDown && (event.ctrlKey || event.controlKey) && container.getChildren().length > 0) {
					var y:int = event.stageY;
					var c:DisplayObject = container.getChildAt(container.getChildren().length - 1);
					var	w:int = c.y + c.height;
					
					y -= container.parent.y;
					y -= container.y;
					
					container.verticalScrollPosition = (w - container.height) * (y / container.height);
					//event.stopPropagation();
				} 
			}
			
			private function resize(event:ResizeEvent):void {
				//this.container.width = this.width - 24;
				//this.container.height = this.height - 24;
				
				//this.tabbar.width = this.container.width;
				this.canvas.width = this.container.width;
				this.boxUserInfo.width = this.container.width;
				this.compose.width = this.container.width;
				this.compose.height = this.attachedPhotos.height + this.statusMessage.height + 10
				this.statusColumn.width = this.compose.width - this.buttonColumn.width - 10;
				this.statusMessage.height = this.statusColumn.height;
				this.compose.y = this.container.height - this.compose.height;
				this.canvas.height = this.compose.y - this.canvas.y;
				
				for each(var tab:VBox in this.canvas.getChildren()) {
					tab.width = this.canvas.width;
					if(tab.verticalScrollBar != null) tab.verticalScrollBar.width = 20;
					for each (var item in tab.getChildren()) {						
						item.width = this.canvas.width - 20;
					}
				}
			}
			
			private function login():void {
				this.twitter = new TwitterAPI(username.text, password.text);
				twitter.login(this.loginListener);
				Alert.show("Logging in...");				
			}
			
			private function loadUser(sn:String):void {
				if (this.twitter != null) {
					twitter.getUser(sn, "", this.loadUserListener);
				} else {
					//no need for error msg, since the user cannot directly invoke this method
					//Alert.show("You are not logged in.");
				}
			}
			
			private function uploadPhoto():void {
				if (this.twitpic != null)
					this.twitpic.upload(this.twitPicListener);
				else
					Alert.show("You must be logged in to upload an image.");
			}
			
			private function updateUserTimeline():void {
				if (this.twitter != null)
					this.twitter.getUserTimeline(this.user.id, 30, this.getUserTimelineListener);
				else
					Alert.show("You must be logged in to update the timeline.");					
			}
			
			private function genericListener(success:Boolean, xml:XML):void {
				Alert.show("genericListener>\nsuccess: " + success);
				Alert.show(xml.toString());
			}
			
			private function loginListener(success:Boolean, authenticated:Boolean):void {
				Alert.show("loginListener>\nsuccess: " + success);
				Alert.show("logged in: " + authenticated);
				
				if (!success) {
					Alert.show("Login failed:\n\nError sending request to server.  Please try again.");
					
					this.twitpic = null;
					this.twitter = null;
				} else if (!authenticated) {
					Alert.show("Login failed:\n\nAuthentication rejected.  Please re-enter your username and password.");
					
					this.twitpic = null;
					this.twitter = null;
				} else {
					//logged in:
					//load twitpic
					this.twitpic = new TwitPicAPI(username.text, password.text);
					//load user data
					loadUser(username.text);
				}
			}

			private function logoutListener(success:Boolean, loggedout:Boolean):void {
				Alert.show("logoutListener>\nsuccess: " + success);
				Alert.show("logged out: " + loggedout);
				
				if (!success) {
					Alert.show("Logout failed:\n\nError sending request to server.  Please try again.");
					
					//this.twitpic = null;
					//this.twitter = null;
				} else if (!loggedout) {
					Alert.show("Logout failed:\n\nSession may already be terminated.");
					
					//this.twitpic = null;
					//this.twitter = null;
				} else {
					this.twitpic = null;
					this.twitter = null;
					this.user = null;
				}
			}
			
			private function loadUserListener(success:Boolean, user:UserFull):void {
				Alert.show("loadUserListener>\n" + success);
				if (!success) {
					//no need for alert
					//Alert.show("Updating user information failed.");
				} else {
					this.user = user;
					
				}
				
				if (this.user != null) {
					twit.Settings.setTextcolor("#" + user.profile_text_color);
					twit.Settings.setBackcolor("#" + user.profile_background_color);
					twit.Settings.setLinkcolor("#" + user.profile_link_color);
					twit.Settings.setFillcolor("#" + user.profile_sidebar_fill_color);
					twit.Settings.setBordercolor("#" + user.profile_sidebar_border_color);
										
					this.setStyle("backgroundColor", "#" + user.profile_background_color);
					
					this.imgIcon.source = user.profile_image_url;
					this.txtScreenName.text = user.screen_name;
					this.txtName.text = user.name;
					this.txtLocation.text = user.location;
					this.txtDescription.text = user.description;
					this.txtFollowers.text = "" + user.followers_count;
					this.txtFriends.text = "" + user.friends_count;
					this.txtUpdates.text = "" + user.statuses_count;
					this.txtRateLimit.text = "";
					this.txtUrl.text = user.url;
					
					for each (var row:GridRow in this.boxUserInfo.getChildren()) {						
						for each (var item:GridItem in row.getChildren()) {
							item.setStyle("color", "#" + user.profile_text_color);
							
						}
					}
					/*
					this.txtScreenName.setStyle("color", "#" + user.profile_text_color);
					this.txtName.setStyle("color", "#" + user.profile_text_color);
					this.txtLocation.setStyle("color", "#" + user.profile_text_color);
					this.txtDescription.setStyle("color", "#" + user.profile_text_color);
					this.txtFollowers.setStyle("color", "#" + user.profile_text_color);
					*/
				}
			}
			
			private function getUserTimelineListener(success:Boolean, statuses:Array):void {
				if (success && statuses != null) {
					for(var i:int = 0; i < statuses.length; i++) {
						var s:Status = new Status(new XML(statuses[i]));
						addStatus(s, this.cnvUserTimeline);
					}
				} else {
					Alert.show("An error occured updating the timeline.");
				}
			}
			
			private function deleteArchived(unwanted:Message):void {
				   
				this.cnvArchive.removeChild(unwanted);
				 
				var fs:FileStream = new FileStream();
				fs.open(Settings.ARCHIVE_XML_FILE, FileMode.WRITE);
				fs.writeUTFBytes(new String("<?xml version=\"1.0\" encoding=\"UTF-8\"?>"));
				for each (var msg:Message in this.cnvArchive.getChildren()) {
					for each (var stat:XML in msg.getXMLs()) {
						fs.writeUTFBytes(stat.toString());   
					}
				}
				fs.close();
			}
		/*	private function deleteArchived(statuses:Array):void {
				var fs:FileStream = new FileStream();
				fs.open(ARCHIVE_XML_FILE, FileMode.APPEND);
				for each (var item:XML in statuses) {
					fs.writeUTFBytes(item.toString());
					if(item.child("text").toString().substr(0,7) == "[photo]") {
						for each (var url:String in item.child("text").toString().substr(7).split(' ')) {
							var req:URLRequest = new URLRequest(url.replace("twitpic.com/", "twitpic.com/show/full/"));
							var stream:URLStream= new URLStream();
							stream.addEventListener(Event.COMPLETE, function (e:Event) : void {
		              				writeArchiveImageFile(e,url.substr(19).concat(".jpg"), stream);
		       			 		});
							stream.load(req);	
							
							req = new URLRequest(url.replace("twitpic.com/", "twitpic.com/show/thumb/"))
							var stream2:URLStream= new URLStream();
							stream2.addEventListener(Event.COMPLETE, function (e:Event) : void {
		              				writeArchiveImageFile(e,url.substr(19).concat("_thumb.jpg"), stream2);
		       			 		});
							stream2.load(req);	
						}
					}
				}
				fs.close();
			}*/
			
			private function loadArchive():void {
				var fs:FileStream = new FileStream();
				fs.open(Settings.ARCHIVE_XML_FILE, FileMode.READ);
				var data:String = fs.readUTFBytes(fs.bytesAvailable);
				if (data.length != 0) {
					data = data.replace("?>", "?><statuses type=\"array\">");
					data += "</statuses>";
				}
				var statList:XMLList = XML(data).status;
				fs.close();
				for (var i:int = 0; i < statList.length(); i++) {
					var s:Status = new Status(new XML(statList[i]));
					if(s.text.substr(0,7)== "[photo]") {
						var purls:Array = s.text.substr(7).split(' ');
						for each (var purl:String in purls) {
							purl = purl.replace("http://twitpic.com/",Settings.ARCHIVE_XML_FILE.nativePath).concat(".jpg");
							s.text = "[photo]" + purl;
						}
					} else {
						addStatus(s, this.cnvArchive);
					}				
				}			
			}
			
			private function addStatus(s:Status, timeline:VBox) {
				var txt:String = s.text;
				var t:Twit = new Twit();
				var u:String = s.user.screen_name;
				
				if (txt.substr(0, 7) == "[group]")
				{
					this.openGroup[u] = new Message(s);
					Message(this.openGroup[u]).addXML(s.xml);
				}
				else if (txt.substr(0, 8) == "[/group]" && this.openGroup[u] != null)
				{
					timeline.addChild(this.openGroup[u]);
					
					Message(this.openGroup[u]).addXML(s.xml);
					Message(this.openGroup[u]).archive();
					this.openGroup[u].width = this.canvas.width;
					this.openGroup[u] = null;
				}
				else if (this.openGroup[u] != null)
				{
					var t:Twit;
					if (txt.substr(0, 7) == "[photo]") {
						for each (var src:String in txt.substr(7).split(" ")) {
							if (src.length > 0) {
								t = new Twit();
								t.setImage(src);
								this.openGroup[u].addTwit(t);
							}
						}
					}
					else
					{
						t = new Twit();
						t.setText(txt);
						this.openGroup[u].addTwit(t);
					}					
					Message(this.openGroup[u]).addXML(s.xml);
				}
				else
				{
					if (txt.substr(0, 7) == "[photo]") {
						for each (var src:String in txt.substr(7).split(" ")) {
							if (src.length > 0) {
								t = new Twit();
								t.setImage(src);
								timeline.addChild(t);
							}
						}
					}
					else
					{
						t = new Twit();
						t.setText(txt);
						timeline.addChild(t);
					}
				}
			}
			
			private function updateStatusListener(success:Boolean, xml:XML):void {
				Alert.show("updateStatusListener>\nsuccess: " + success);
				if (success) {
					this.msgQueue.pop(); //toss old msg, which was successful
					if (this.msgQueue.length > 0) {
						var text:String = this.msgQueue.pop(); //get next msg
						this.twitter.updateStatus(text, this.updateStatusListener); //send
						this.msgQueue.push(text); //push msg back in in case it doesnt go through
					}
				} else {
					var text:String = this.msgQueue.pop(); //get next msg
					this.twitter.updateStatus(text, this.updateStatusListener); //send
					this.msgQueue.push(text); //push msg back in in case it doesnt go through
				}
			}
			
			private function updateLocationListener(success:Boolean, xml:XML):void {
				Alert.show("success: " + success);
				Alert.show(xml.toString());
			}
			
			private function getRateLimitListener(success:Boolean, xml:XML):void {
				Alert.show("success: " + success);
				Alert.show(xml.toString());
			}
			
			private function getFriendsListener(success:Boolean, xml:XML):void {
				Alert.show("success: " + success);
				Alert.show(xml.toString());
			}
			
			private function getFollowersListener(success:Boolean, xml:XML):void {
				Alert.show("success: " + success);
				Alert.show(xml.toString());
			}
			
			private function getUserListener(success:Boolean, xml:XML):void {
				Alert.show("success: " + success);
				Alert.show(xml.toString());
			}

			private function getDirectMsgListener(success:Boolean, xml:XML):void {
				Alert.show("success: " + success);
				Alert.show(xml.toString());
			}
			
			private function getSentMsgListener(success:Boolean, xml:XML):void {
				Alert.show("success: " + success);
				Alert.show(xml.toString());
			}
			
			private function sendDirectMsgListener(success:Boolean, xml:XML):void {
				Alert.show("success: " + success);
				Alert.show(xml.toString());
			}
			
			private function destroyDirectMsgListener(success:Boolean, xml:XML):void {
				Alert.show("success: " + success);
				Alert.show(xml.toString());
			}
			
			private function twitPicListener(url:String, thumburl:String, fullurl:String):void
			{
				var t:Twit = new Twit();
				t.setImage(url);
				this.attachedPhotos.addChild(t);
				this.attachedPhotos.height = 150;
				this.resize(new ResizeEvent(ResizeEvent.RESIZE));
			}
			
			private function buttonClickListener(event:ItemClickEvent) {
				switch(event.label) {
					case "Add Photo":
						this.uploadPhoto();
					break;
					
					case "Post Message":
						this.postMessage();
					break;
					
					case "Edit Keywords":
					
					break;
				}
			}
			
			private function postMessage():void {
				if (this.twitter == null) {
					Alert.show("You must login before you can post a message.");
				} else if (this.statusMessage.text.length == 0) {
					Alert.show("You may not post a blank status message.  Please enter some text.");	
				} else {
					postText("[/group]");
					if (this.attachedPhotos.numChildren > 0) {
						var photos:String = "";
						for (var i:int = 0; i < this.attachedPhotos.numChildren; i++) {
							if (i % 5 == 0) {
								if (photos.length > 0) postText(photos);
								photos = "[photo]";								
							}
							photos += Twit(this.attachedPhotos.getChildAt(i)).imageUrl + " ";
						}
						if (photos != "[photo]") postText(photos);
					}
					postText(this.statusMessage.text);					
					postText("[group]");
				}
			}
			
			private function postImage(url:String):void {
				if (this.twitter != null) {
					this.twitter.updateStatus("[photo]" + url, this.updateStatusListener);
				} else {
					Alert.show ("You must login before you may post an image.");
				}
			}
			
			
			private function postText(text:String):void {
				if (this.twitter != null) {
					this.queueMessage(text);
//					this.twitter.updateStatus(text, this.updateStatusListener);
				} else {
					Alert.show ("You must login before you may post a message.");
				}
			}
			
			private function queueMessage(text:String) {
				if (this.msgQueue.length == 0) {
					twitter.updateStatus(text, this.updateStatusListener);
				} else {
					this.msgQueue.push(text);
				}
			}
		]]>
	</mx:Script>
</mx:WindowedApplication>
